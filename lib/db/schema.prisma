generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role             @default(USER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  comments      Comment[]
  roleModified  RoleAudit[]      @relation("RoleModifier")
  roleAudits    RoleAudit[]
  sessions      Session[]
  permissions   UserPermission[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserPermission {
  id         String     @id @default(cuid())
  userId     String
  permission Permission
  assignedAt DateTime   @default(now())
  assignedBy String?
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoleAudit {
  id         String   @id @default(cuid())
  userId     String
  oldRole    Role
  newRole    Role
  modifiedBy String
  reason     String?
  createdAt  DateTime @default(now())
  modifier   User     @relation("RoleModifier", fields: [modifiedBy], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMINISTRATOR
  AUTHOR
  USER
}

enum Permission {
  CREATE_POST
  EDIT_POST
  DELETE_POST
  MANAGE_USERS
  MANAGE_ROLES
  VIEW_DASHBOARD
  CREATE_COMMENT
  EDIT_COMMENT
  DELETE_COMMENT
}
