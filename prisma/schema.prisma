// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roles         UserRole[]
}

model Role {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  users        UserRole[]
  permissions  RolePermission[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Permission {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  roles        RolePermission[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Join Tables
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@unique([roleId, permissionId])
}
