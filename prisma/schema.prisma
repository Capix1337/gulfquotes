generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
  quotes                Quote[]                @relation("QuoteAuthor")
  userProfile           UserProfile? 

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}

model Quote {
  id               String         @id @default(cuid())
  content          String         @db.Text
  slug             String         @unique
  backgroundImage  String? 
  author           User           @relation("QuoteAuthor", fields: [authorId], references: [id])
  authorId         String
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       String
  authorProfile    AuthorProfile  @relation(fields: [authorProfileId], references: [id])
  authorProfileId  String
  tags             Tag[]          @relation("QuoteToTag")
  gallery          QuoteToGallery[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("quotes")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  quotes      Quote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model AuthorProfile {
  id         String        @id @default(cuid())
  name       String
  born       String?
  died       String?
  influences String?
  bio        String        @db.Text
  slug       String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  images     AuthorImage[]
  quotes     Quote[]

  @@map("author_profiles")
}

model AuthorImage {
  id             String       @id @default(cuid())
  url            String
  authorProfile  AuthorProfile @relation(fields: [authorProfileId], references: [id], onDelete: Cascade)
  authorProfileId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("author_images")
}

// Remove QuoteImage model completely (delete this block)

model UserProfile {
  id          String    @id @default(cuid())
  username    String?   @unique
  bio         String?   @db.Text
  slug        String    @unique @default("")
  website     String?
  location    String?
  twitter     String?
  github      String?
  linkedin    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique

  @@index([slug])
  @@map("user_profiles")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  quotes    Quote[]  @relation("QuoteToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Gallery {
  id          String    @id @default(cuid())
  url         String
  publicId    String    @unique
  title       String?
  description String?   @db.Text
  altText     String?
  format      String?
  width       Int?
  height      Int?
  bytes       Int?
  isGlobal    Boolean   @default(true)
  usageCount  Int       @default(0)
  quotes      QuoteToGallery[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("galleries")
}

model QuoteToGallery {
  id          String   @id @default(cuid())
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId   String
  isActive    Boolean  @default(false)
  isBackground Boolean @default(false)
  createdAt   DateTime @default(now())

  @@unique([quoteId, galleryId])
  @@map("quote_to_galleries")
}
