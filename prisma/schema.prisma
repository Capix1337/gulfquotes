generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
  quotes                Quote[]                @relation("QuoteAuthor")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}

model Quote {
  id               String         @id @default(cuid())
  content          String         @db.Text
  slug             String         @unique
  author           User           @relation("QuoteAuthor", fields: [authorId], references: [id])
  authorId         String
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       String
  
  // New relation to the real-world AuthorProfile
  authorProfile    AuthorProfile? @relation(fields: [authorProfileId], references: [id])
  authorProfileId  String?

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("quotes")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  quotes      Quote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model AuthorProfile {
  id         String   @id @default(cuid())
  name       String
  born       String?   // e.g., "Born in Dublin, Ireland - October 16, 1854"
  died       String?   // e.g., "November 30, 1900"
  influences String?   // Comma-separated list or JSON array of names
  bio        String    @db.Text
  slug       String    @unique   // for SEO-friendly URLs
  images     Json?     // to store one or multiple image URLs
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  quotes     Quote[]   // relation, if needed from the AuthorProfile side

  @@map("author_profiles")
}
